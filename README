Ryan Wixon and Adrianna Koppes
Phase 4 diff Explanations

------------------------------------------------------------------------------
Phase 4a Explanations ########################################################
------------------------------------------------------------------------------

test00, test01, test02
------------------------------------------------------------------------------
All 3 of these tests deal with the sleep syscall, and use the current system
time in their output. Due to the nature of sleeping, it is extremely difficult
or impossible to match the times exactly. However, our processes execute and
terminate in the same order as the example output, and the times are all
similar if not exact. Thus, our output is still correct.  
------------------------------------------------------------------------------

test07
------------------------------------------------------------------------------
This test spawns 4 children that write to a terminal. Each of these children
have the same priority, and they will be trying to write to the terminals in
the same order. Due to the equal priorities and the fact that only one process
may execute the critical section of termWrite at any given time, there will be
race conditions in the execution. Our output reports a different order of
completion for each child's 4 write operations, but they are all completed
just as in the example output. Thus, our output is still correct.
------------------------------------------------------------------------------

test20
------------------------------------------------------------------------------
Similarly to test07, the testcase creates 8 children with the same priority
that read or write to a terminal. Race conditions will again exist for the
same reasons as described previously; our output is again slightly out of
order, but every operation completes successfuly and correctly. Thus, our
output is still correct.
------------------------------------------------------------------------------

test22
------------------------------------------------------------------------------
This testcase again creates multiple children with the same priority, and 
tasks them with reading a line from a terminal, and then writing it to a 
terminal. Once again, race conditions are possible. All lines are written
correctly and in the right order, although some terminals may have lines
written to them faster than others. Thus, our output is still correct.
------------------------------------------------------------------------------

------------------------------------------------------------------------------
Phase 4b Explanations ########################################################
------------------------------------------------------------------------------

test16, test18
------------------------------------------------------------------------------
Both of these testcases create a number of child processes with identical
priorities (in this case, 1). Though these child processes each have their own
starting functions, said functions are all identical in that they immediately
attempt to write to the disk. Thus, they race to enter the diskWrite()
function. While the C-SCAN ordering of the disks is able to implement some 
level of uniformity to the output, it does not guarantee an identical output 
each time it is run. Our output performs the writes in a slightly different
order, but each one is completed correctly; thus, it is still correct.
------------------------------------------------------------------------------

test23
------------------------------------------------------------------------------
This testcase tests all of the system calls implemented in Phase 4. While all
of the output for the terminal and disk-related system calls matches exactly,
it is only the Sleep syscall that shows a difference in output. This output
uses the current system time and attempts to compare the system time at the 
end of sleeping between the sample output and the GradeScope autograder. Due 
to the nature of sleeping, it is extremely difficult or impossible to match 
the system times exactly. However, our five sleeping processes execute and
terminate in the same order as in the sample output, with only the system 
times not matching. Even then, all of the times are similar despite not 
matching exactly, which indicates that the functionality of our sleep system
call still matches the required functionality. Thus, our output is still 
correct.
------------------------------------------------------------------------------
