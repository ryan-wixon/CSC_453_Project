adding to run queue
added to run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 1
	PROCESS WRAPPER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Running
	INIT PROCESS MAIN
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Running
phase2_start_service_processes() called -- currently a NOP
phase3_start_service_processes() called -- currently a NOP
phase4_start_service_processes() called -- currently a NOP
phase5_start_service_processes() called -- currently a NOP
	SPORK
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Running
	CREATING PROCESS testcase_main
adding to run queue
added to run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Running
   2     1  testcase_main     3         Runnable
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 2
	PROCESS WRAPPER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
	TESTCASE MAIN WRAPPER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
testcase_main(): started
EXPECTATION: Similar to test15, except that XXp2() will zap() XXp1() while XXp1() is also zap()ping XXp3().
testcase_main(): first fork -- XXp1 will run next.
	SPORK
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
	CREATING PROCESS XXp1
adding to run queue
added to run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
   3     2  XXp1              1         Runnable
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 3
	PROCESS WRAPPER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Running
XXp1(): started
XXp1(): arg = 'XXp1'
XXp1(): executing fork of first child -- XXp1() will continue to run, because XXp3 is very low priority.
	SPORK
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Running
	CREATING PROCESS XXp3
adding to run queue
added to run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Running
   4     3  XXp3              3         Runnable
DISPATCHER CHECKPOINT 1
DISPATCHER CHECKPOINT 2
FINISHED DISPATCHER
XXp1(): spork of first child returned pid = 4
XXp1(): zap'ing process with 4 -- this will block until XXp3() dies.  Therefore, we expect testcase_main() to run next.
	ZAP
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Running
   4     3  XXp3              3         Runnable
	ZAPPING PID: 4
	BLOCK ME
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Running
   4     3  XXp3              3         Runnable
	BLOCKING XXp1
popping from run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 2
FINISHED DISPATCHER
testcase_main(): after fork of first child 3 -- this shouldn't happen until XXp1() blocks in zap().
testcase_main(): second fork -- XXp2 will run next.
	SPORK
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
	CREATING PROCESS XXp2
adding to run queue
added to run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Runnable
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 5
	PROCESS WRAPPER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Running
XXp2(): started
XXp2(): zap'ing process with pid = 3 -- we will block, because we are zap()ping XXp1().  When we do this, testcase_main() and XXp3() will race to run next.
	ZAP
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Running
	ZAPPING PID: 3
	BLOCK ME
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Running
	BLOCKING XXp2
popping from run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 2
FINISHED DISPATCHER
testcase_main(): after fork of second child 5 -- testcase_main() and XXp3() race when both XXp1() and XXp2() are blocked in zap(); thus, you might see this print early (after XXp2() blocks), or late (after XXp2() dies).
testcase_main(): performing join -- if testcase_main() won the race with XXp3(), then it will block here, and XXp3() will run, and then that will trigger the events that cause XXp1() and XXp2() to die.  But if it *LOSES* the race, then XXp1() and XXp2() are already dead, and this will return immediately.
	JOIN
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
	JOINING CHLDREN OF testcase_main
JOIN CHECKPOINT 1
JOIN CHECKPOINT 2
	BLOCK ME
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
	BLOCKING testcase_main
popping from run queue
popped from run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Runnable
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 4
	PROCESS WRAPPER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Running
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
XXp3(): started
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Running
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
XXp3(): terminating -- XXp1(), which is blocked in zap(), will wake up.
	QUIT
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Running
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
	QUITTING XXp3
QUIT CHECKPOINT 1
popping from run queue
QUIT CHECKPOINT 2
	UNBLOCKPROC
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Blocked(waiting for zap target to quit)
   4     3  XXp3              3         Terminated(5)
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
	Unblocking PID 3
adding to run queue
added to run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Runnable
   4     3  XXp3              3         Terminated(5)
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 3
FINISHED DISPATCHER
XXp1(): after zap'ing process with pid_z=4
XXp1(): joining with first child
	JOIN
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Running
   4     3  XXp3              3         Terminated(5)
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
	JOINING CHLDREN OF XXp1
JOIN CHECKPOINT 1
JOIN CHECKPOINT 2
XXp1(): join returned kidpid = 4, status = 5
XXp1(): terminating -- when this happens, XXp2() will unblock.  It will immediately run, because it is higher priority than testcase_main().
	QUIT
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Blocked(waiting for child to quit)
   3     2  XXp1              1         Running
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
	QUITTING XXp1
QUIT CHECKPOINT 1
popping from run queue
QUIT CHECKPOINT 2
adding to run queue
added to run queue
	UNBLOCKPROC
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Terminated(3)
   5     2  XXp2              2         Blocked(waiting for zap target to quit)
	Unblocking PID 5
adding to run queue
added to run queue
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Terminated(3)
   5     2  XXp2              2         Runnable
DISPATCHER CHECKPOINT 1
DISPATCHER CHECKPOINT 2
FINISHED DISPATCHER
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Terminated(3)
   5     2  XXp2              2         Runnable
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 5
FINISHED DISPATCHER
XXp2(): after zap'ing process with pid = 3
XXp2(): terminating -- this will allow testcase_main() to run.
	QUIT
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Terminated(3)
   5     2  XXp2              2         Running
	QUITTING XXp2
QUIT CHECKPOINT 1
popping from run queue
QUIT CHECKPOINT 2
	DISPATCHER
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Runnable
   3     2  XXp1              1         Terminated(3)
   5     2  XXp2              2         Terminated(5)
DISPATCHER CHECKPOINT 1
SWITCHING TO PID 2
FINISHED DISPATCHER
testcase_main(): exit status for child 5 is 5
testcase_main(): performing join
	JOIN
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
   3     2  XXp1              1         Terminated(3)
	JOINING CHLDREN OF testcase_main
JOIN CHECKPOINT 1
JOIN CHECKPOINT 2
testcase_main(): exit status for child 3 is 3
	QUIT
 PID  PPID  NAME              PRIORITY  STATE
   1     0  init              6         Runnable
   2     1  testcase_main     3         Running
	QUITTING testcase_main
QUIT CHECKPOINT 1
popping from run queue
QUIT CHECKPOINT 2
finish(): The simulation is now terminating.
